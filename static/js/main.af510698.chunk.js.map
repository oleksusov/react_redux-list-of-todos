{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","types/Status.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","StatusValues","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","Active","completed","Completed","title","toLowerCase","includes","length","className","map","id","classNames","onClick","currentTodoActions","setTodo","TodoFilter","setQuery","newQuery","onSubmit","event","preventDefault","name","value","onChange","newStatus","target","All","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","loadUser","a","userId","userFromServer","Error","useEffect","href","email","App","loadTodos","todosFromServer","todosActions","loadTodosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af510698.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype InitialStateType = {\n  query: string;\n  status: Status;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nexport const actions = {\n  setStatus,\n  setQuery,\n};\n\ntype Action = SetStatusAction | SetQueryAction;\n\nconst initialState: InitialStateType = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/LOAD';\n  payload: Todo[];\n};\n\nconst loadTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\ntype Action = SetTodosAction;\n\nexport const actions = { loadTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export type Status = 'all' | 'active' | 'completed';\n\nexport enum StatusValues {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { StatusValues } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const setTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  let visibleTodos = todos.filter(todo => {\n    switch (status) {\n      case StatusValues.Active:\n        return !todo.completed;\n\n      case StatusValues.Completed:\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    visibleTodos = visibleTodos.filter(todo => {\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    });\n  }\n\n  return (\n    <>\n      {!visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => {\n              const {\n                id,\n                title,\n                completed,\n              } = todo;\n\n              return (\n                <tr\n                  key={id}\n                  data-cy=\"todo\"\n                  className={classNames(\n                    {\n                      'has-background-info-light':\n                      currentTodo && currentTodo.id === id,\n                    },\n                  )}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      { 'has-text-danger': !completed },\n                      { 'has-text-success': completed },\n                    )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={\n                          currentTodo && currentTodo.id === id\n                            ? 'far fa-eye-slash'\n                            : 'far fa-eye'\n                        }\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status, StatusValues } from '../../types/Status';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const setStatus = ((newStatus: Status) => (\n    dispatch(actions.setStatus(newStatus)))\n  );\n  const setQuery = ((newQuery: string) => (\n    dispatch(actions.setQuery(newQuery)))\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            name=\"statusSelect\"\n            value={status}\n            onChange={(event => {\n              setStatus(event.target.value as StatusValues);\n            })}\n          >\n            <option value={StatusValues.All}>All</option>\n            <option value={StatusValues.Active}>Active</option>\n            <option value={StatusValues.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"\n        control\n        is-expanded\n        has-icons-left\n        has-icons-right\n      \"\n      >\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          name=\"queryInput\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event => {\n            setQuery(event.target.value);\n          })}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"delete\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUser = async () => {\n    try {\n      if (currentTodo) {\n        const userFromServer = await getUser(currentTodo.userId);\n\n        setUser(userFromServer);\n      }\n    } catch {\n      throw new Error('Error! Unable to upload user!');\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => removeTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\n\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = (\n    todosFromServer: Todo[],\n  ) => dispatch(todosActions.loadTodos(todosFromServer));\n\n  const loadTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      loadTodos(todosFromServer);\n    } catch {\n      throw new Error('Error! Unable to upload todos!');\n    }\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <>\n              <h1 className=\"title\">Todos:</h1>\n\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n\n              <div className=\"block\">\n                {todos.length\n                  ? <TodoList />\n                  : <Loader />}\n              </div>\n            </>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}